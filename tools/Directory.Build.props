<Project>
    <ImportGroup Label="SharedPropsAndTargetsImportGroup">
        <Import Project="$(SolutionDir)build\msbuild\DXSharpShared.Build.props"
                Condition=" '$(DXSSharedPropsImported)' != 'true' " />
    </ImportGroup>
    <PropertyGroup>
        <UseRoslynCodeFactory Condition=" '$(UseRoslynCodeFactory)' == '' ">true</UseRoslynCodeFactory>
    </PropertyGroup>
    <Choose>
        <When Condition=" '$(UseRoslynCodeFactory)' == 'true' " >
            <!-- Declare the code factory as the RoslynCodeFactory type: -->
            <PropertyGroup>
                <InlineTaskCodeFactory>RoslynCodeFactory</InlineTaskCodeFactory>
            </PropertyGroup>
        </When>
        <Otherwise>
            <!-- Declare the code factory as the old CodeTaskFactory type: -->
            <PropertyGroup>
                <InlineTaskCodeFactory>CodeTaskFactory</InlineTaskCodeFactory>
            </PropertyGroup>
        </Otherwise>
    </Choose>
    
    <ItemDefinitionGroup>
        <InlineTaskDefinition>
            <TaskFiles>%(RootPath)\%(Name).cs;%(RootPath)\%(Name).targets"</TaskFiles>
            <RootPath>%(RootPath)</RootPath>
            <TaskName>%(Name)</TaskName>
            
            <TaskFactory>RoslynCodeTaskFactory</TaskFactory>
            <ErrorCheck>$(InlineTaskErrorChecks)</ErrorCheck>
            
            <RelOutputPath>.\</RelOutputPath>
            <CodeFile>$(TaskName).cs</CodeFile>
            <TargetFile>$(TaskName).targets</TargetFile>
            <OutputPath>$(RepoRootPath)tools\tasks\$(MSBuildProjectName)</OutputPath>
        </InlineTaskDefinition>
    </ItemDefinitionGroup>

    
    <PropertyGroup Label="DXSToolsGlobalProps" >
        <DXSToolsPropsImported>true</DXSToolsPropsImported>
        
        <WindowsOnly>false</WindowsOnly>
        <IsToolsProject>true</IsToolsProject>
        <TargetPlatforms>AnyCPU</TargetPlatforms>
        <IsMultiTargeting>false</IsMultiTargeting>
        <DotNetTargets>netstandard2.0</DotNetTargets>
        <TargetFramework>$(DotNetTargets)</TargetFramework>
        <RepoRootPath Condition=" '$(RepoRootPath)' == '' " >$(SolutionDir)</RepoRootPath>
        
        <DXSToolsVersion>0.1.0</DXSToolsVersion>
        <DXSToolsPath>$(RepoRootPath)tools</DXSToolsPath>
        <DXSTasksPath>$(DXSToolsPath)\tasks</DXSTasksPath>
        <DXSToolsLibrariesPath>$(DXSToolsPath)\bin</DXSToolsLibrariesPath>
        <DXSTasksLibrariesPath>$(DXSTasksPath)\bin</DXSTasksLibrariesPath>
        
        <DXSToolsDllObjPath>$(DXSToolsPath)\obj\$(MSBuildProjectName)\$(Configuration)</DXSToolsDllObjPath>
        <DXSToolsDllOutputPath Condition=" '$(IsMultiTargeting)' != 'true' " >$(DXSToolsPath)\bin\$(MSBuildProjectName)\$(Configuration)</DXSToolsDllOutputPath>
        <DXSToolsDllOutputPath Condition=" '$(IsMultiTargeting)' == 'true' " >$(DXSToolsPath)\bin\$(MSBuildProjectName)\$(Configuration)\$(TargetFramework)</DXSToolsDllOutputPath>
        
        <DXSTasksDllObjPath>$(DXSTasksPath)\obj\$(MSBuildProjectName)\$(Configuration)</DXSTasksDllObjPath>
        <DXSTasksDllOutputPath Condition=" '$(IsMultiTargeting)' != 'true' " >$(DXSTasksPath)\bin\$(MSBuildProjectName)\$(Configuration)</DXSTasksDllOutputPath>
        <DXSTasksDllOutputPath Condition=" '$(IsMultiTargeting)' == 'true' " >$(DXSTasksPath)\bin\$(MSBuildProjectName)\$(Configuration)\$(TargetFramework)</DXSTasksDllOutputPath>
        
        <ToolsSrcFolder>$(MSBuildProjectDirectory)</ToolsSrcFolder>
        <ShaderToolsSrcFolder>$(ToolsSrcFolder)Shaders</ShaderToolsSrcFolder>
        <InlineTasksOutputFolder>$(DXSTasksPath)\$(MSBuildProjectName)</InlineTasksOutputFolder>
        <ToolsSrcFolderRel>$([MSBuild]::MakeRelative( $(RepoRootPath), $(ToolsSrcFolder) ))</ToolsSrcFolderRel>
        <NuGetPackageOutputFolder>$(DXSToolsLibrariesPath)\packages\$(MSBuildProjectName)</NuGetPackageOutputFolder>
        
        <Configurations>Debug;Release;InlineTasks;Package</Configurations>
        <BuildingForNuGet Condition=" '$(BuildingForNuGet)' == '' ">false</BuildingForNuGet>
        <BuildingInlineTasks Condition=" '$(BuildingInlineTasks)' == '' ">true</BuildingInlineTasks>
        <InlineTaskErrorChecks Condition=" '$(InlineTaskErrorChecks)' == '' " >true</InlineTaskErrorChecks>
    </PropertyGroup>
    <Choose>
        <When Condition=" '$(Configuration)' == 'InlineTasks' or '$(BuildingInlineTasks)' == 'true' " >
            <!-- Setup props for building inline task scripts: -->
            <PropertyGroup>
                <IsPackable>false</IsPackable>
                <BuildingClassLib>false</BuildingClassLib>
                <BuildingForNuGet>false</BuildingForNuGet>
                <BuildingInlineTasks>true</BuildingInlineTasks>
                <BaseOutputPath>$(DXSTasksPath)\</BaseOutputPath>
                <OutputPath>$(InlineTasksOutputFolder)\</OutputPath>
            </PropertyGroup>
        </When>
        <When Condition=" '$(Configuration)' == 'Package' " >
            <!-- Setup props for building a NuGet package: -->
            <PropertyGroup>
                <BuildingForNuGet>true</BuildingForNuGet>
                <BuildingClassLib>false</BuildingClassLib>
                <BuildingInlineTasks>false</BuildingInlineTasks>
                <OutputPath>$(NuGetPackageOutputFolder)\</OutputPath>
                
                <!-- This property tells MSBuild where the root folder of the package's build assets should be. 
                     Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
                <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
                
                <!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ 
                     do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
                <NoWarn>NU5100</NoWarn>
                <IsPackable>true</IsPackable>
                <DebugType>embedded</DebugType>
                <PackageTags>dxsharp;msbuild;tasks;tools;shader;dxc;compiler;directx;3d;hlsl</PackageTags>
            </PropertyGroup>
        </When>
        <Otherwise>
            <!-- If we're not building inline task scripts, define props for building DLL: -->
            <PropertyGroup Condition=" '$(BuildingInlineTasks)' != 'true' " >
                <!-- Here, we're building a complete .dll library -->
                <IsPackable>false</IsPackable>
                <OutputType>Library</OutputType>
                <BuildingClassLib>true</BuildingClassLib>
                <BuildingForNuGet>false</BuildingForNuGet>
                <OutputPath>$(DXSToolsDllOutputPath)\</OutputPath>
                <BaseIntermediateOutputPath>$(DXSToolsDllObjPath)\</BaseIntermediateOutputPath>
            </PropertyGroup>
        </Otherwise>
    </Choose>
    
    
    <!-- Import the shared props/targets file(s) if not imported already: -->
    <ImportGroup Label="SharedPropsAndTargetsImportGroup">
        <Import Project="$(SolutionDir)build\msbuild\DXSharpShared.Build.props"
                Condition=" '$(DXSSharedPropsImported)' != 'true' " />
        
        <Import Project="$(DXSToolsPath)\Directory.Build.targets"
                Condition=" '$(DXSToolsTargetsImported)' != 'true' " />
    </ImportGroup>
    
    <PropertyGroup Label="AssemblyInfoProps" >
        <Company>Arkaen Solutions</Company>
        <Authors>Aaron T. Carter, $(Company)</Authors>
        <AssemblyName>$(MSBuildProjectName)</AssemblyName>
        <AssemblyVersion>$(DXSToolsVersion)</AssemblyVersion>
        <Title Condition=" '$(Title)' == '' ">$(AssemblyName)</Title>
        <Description>Custom tooling for the DXSharp build process.</Description>
        <Product Condition=" '$(Product)' == '' " >$(MSBuildProjectName)</Product>
        <ProductName Condition=" '$(ProductName)' == '' " >$(Product)</ProductName>
        <Copyright>Copyright Â© Aaron T. Carter, Arkaen Solutions. All rights reserved.</Copyright>
        <AssemblyTitle Condition=" '$(AssemblyTitle)' == '' " >$(MSBuildProjectName)</AssemblyTitle>
        
        <TargetFramework>netstandard2.0</TargetFramework>
        <AssemblyName>$(MSBuildProjectName)</AssemblyName>
        <RootNamespace>$(MSBuildProjectName)</RootNamespace>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <GeneratePackageOnBuild Condition=" '$(BuildingForNuGet)' == 'true' ">true</GeneratePackageOnBuild>
        
        
        <LangVersion>10</LangVersion>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <FileVersion>$(DXSToolsVersion)</FileVersion>
        <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    </PropertyGroup>
    
</Project>



<!-- NOTES ::
    _________________________________________________________________________________________________________________
    -   This project file is designed to be a set of reusable properties, data, targets, tasks, etc for building
        DXSharp custom tools projects ...
        
    -   It helps define a custom internal build process for MSBuild "inline tasks", which can be deployed to a
        target folder within the DXSharp ".\tools\tasks" directory, which other DXSharp projects can then consume
        as MSBuild tasks. This is useful for building custom tools that are not available in the default MSBuild,
        such as the DXC compiler tool/tasks for MSBuild-based DXSharp projects with HLSL shaders/assets ...
        
    -   About "Inline Tasks" for MSBuild:
        -   Inline tasks are a way to write custom MSBuild tasks in C# code, and then use them in MSBuild projects.
            They are not really compiled into an assembly, and are not deployed as a DLL, but rather are error-checked
            and validated before being deployed as a pairing of a ".cs" file and a ".targets" file, which are then 
            pointed to by an MSBuild "UsingTask" declaration. Rather than the normal route of declaring a custom task
            factory, building/deploying a DLL, and then referencing it in a project, users simply import a ".targets"
            file which holds the <UsingTask ...> declaration, and then the task is available for use in the project. 
            Rather than using the normal "CodeTaskFactory" type, we use the newer "RoslynCodeTaskFactory" type, which 
            accepts a file or fragment of C# code, and then compiles it into an in-memory assembly on the fly, which 
            is then used to execute the task. This is a very modular, streamlined and efficient/flexible way to build 
            tasks and tools, and the custom deployment strategy allows for a very clean and simple way to deploy them 
            to other projects and code/scripts which need them ...
            
            Documentation: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-inline-tasks?view=vs-2022
            Walkthrough: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-creating-an-inline-task
    _________________________________________________________________________________________________________________
    -   About "Directory.Build.props" and "Directory.Build.targets":
        - `Directory.Build.props` in the "<root>\tools" directory defines common/shared properties for MSBuild
           projects/scripts used for building custom DXSharp tooling and tasks. It is imported by all of the 
           "tools projects" (the special projects which build our custom tools). It is essentially part of the
           "tools for making tools" toolbox, and is mostly used for such internal tooling projects (although it
           could be used/adapted in ways outside of that scope if needed/desired) ...
           
        - `Directory.Build.targets` in the "<root>\tools" directory defines common/shared targets for MSBuild
           projects/scripts used for building custom DXSharp tooling and tasks. It is imported by all of the 
           "tools projects" (the special projects which build our custom tools). It is also a big part of our
           "tools for making tools" toolbox, and is mostly used for such internal tooling projects ...
    _________________________________________________________________________________________________________________
            # Important Properties:
            .............................................
                **UseRoslynCodeFactory**
                   (Type: boolean, Default: 'true')
                    -   This property is used to determine whether to use the newer RoslynCodeFactory type for
                        inline tasks, or the older CodeTaskFactory type. The RoslynCodeFactory type is newer and
                        more flexible, but requires the Roslyn SDK to be installed on the machine. If it is not
                        installed, then the older CodeTaskFactory type is used instead ...
                        
                **InlineTaskCodeFactory**
                     (Type: string, Default: 'RoslynCodeFactory')
                      -   This property is used to explicitly declare the type of code factory to use for inline
                          tasks. It is set to the value of the "UseRoslynCodeFactory" property by default, but
                          can be overridden if needed/desired ...
                          
                **BuildingInlineTasks**
                        (Type: boolean, Default: 'true')
                        -   This property is used to determine whether to build the inline tasks for this project.
                            It is set to 'true' by default, but can be overridden if needed/desired ...
                            
                **InlineTaskErrorChecks**
                        (Type: boolean, Default: 'true')
                        -   This property is used to determine whether to perform error checks on the inline tasks
                            before building them. Default is 'true', but can be overridden ...
                            
                **BuildingForNuGet**
                        (Type: boolean, Default: 'false')
                        -   This property is used to determine whether to build the project for NuGet packaging.
                            It is set to 'false' by default, but can be overridden if needed/desired ...
                            
                **BuildingClassLib**
                        (Type: boolean, Default: 'false')
                        -   This property is used to determine whether to build the project as a class 
                            library (DLL) assembly. It is set to 'false' by default, but can be overridden.
                            A tools project can be built into a DLL library either in whole or in part, depending 
                            upon other build settings/properties ...
    _________________________________________________________________________________________________________________
    -->
