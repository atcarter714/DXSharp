# ===   DXSharp .NET Desktop Pipeline   ======================================
# Performs a routine, full-solution build of the DXSharp solution projects.
# Starting with the main DXSharp.csproj, followed by the dependent SDK class
# libraries, and finally the test projects, samples and tools which can be
# built in parallel. The build is followed by a test run of all the unit 
# tests in the ".\Tests" folder ... and finally, a code coverage report is
# generated and published to the build artifacts.
# ---------------------------------------------------------------------------

trigger:
- main
  
parameters:
  - name: buildPlatforms
    type: string
    default: 'Any CPU; x86; x64; arm; arm64'

  - name: buildConfiguration
    type: string
    default: 'Release'

  - name: solution
    type: string
    default: 'DXSharp.sln'

  - name: testFilter
    type: string
    default: '.\tests\**\*[Tt][Ee][Ss][Tt]*.csproj'

  - name: testDllFilter
    type: string
    default: '.\tests\**\*[Tt][Ee][Ss][Tt]*.dll'

  - name: testSettings
    type: string
    default: ''

  - name: publishTestResults
    type: boolean
    default: true

  - name: codeCoverageEnabled
    type: boolean
    default: true


pool: 
   name: default

variables:
  - template: devops/pipelines/inc/global-varz.yml


steps:
- task: NuGetToolInstaller@1
  condition: not(exists('$(NuGetExePath)'))
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: Build
    displayName: 'Build job'
    steps:
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

# ---------------------------------------------------------------------------
# BUILD SOLUTION ::
# ---------------------------------------------------------------------------

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'


# ---------------------------------------------------------------------------
# RUN TESTS ::
# ---------------------------------------------------------------------------
# Make the VSTest step smarter:
# Look for any .dll inside the \tests directory with "Test" in the name ...

- task: VSTest@2
  inputs:
    testAssemblyVer2: |
      [Bb]in\[Tt]ests\**\*[Tt]est*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)\bin\Tests'
    codeCoverageEnabled: true

