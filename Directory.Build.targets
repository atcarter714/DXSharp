<Project>
    <!-- Set custom targets for a special build process: -->
    <!--<PropertyGroup>
        <BuildDependsOn>
            PreBuildEventTarget;
        </BuildDependsOn>
    </PropertyGroup>-->
    
    <Target Name="PreBuildEventTarget" BeforeTargets="PreBuildEvent">
        <Message Text="DXS SDK build triggered ..." Importance="high" />
    </Target>
    
    
    <!-- Log startup info: -->
    <Target Name="LogBuildStartMessage" BeforeTargets="Build">
        <PropertyGroup Label="BuildStartupProps">
            <CurrentTime>$([System.DateTime]::Now)</CurrentTime>
            <PlatformNameStr>$(NativePlatformName)</PlatformNameStr>
            <OutputFileExt Condition=" '$(OutputType)' == 'Library' ">dll</OutputFileExt>
            <OutputFileExt Condition=" '$(OutputType)' == 'Exe' ">exe</OutputFileExt>
            <AssemblyOutputFullPath>$(OutputDirectory)$(AssemblyName).$(OutputFileExt)</AssemblyOutputFullPath>
        </PropertyGroup>
        
        <Message Text="DXSharp SDK build process started @ '$(CurrentTime)' ..." Importance="high" />
        <Message Text="Building :'$(ProjectName)' in: '$(RepoRootPath)'..." Importance="high" />
        <Message Text="Assembly :'$(AssemblyName)' Output Target File: '$(AssemblyOutputFullPath)'" Importance="high" />
        <Message Text="SDK Target Frameworks: $(DotNetTargets)" Importance="high" />
        <Message Text="SDK Target Processors: $(PlatformNameStr)" Importance="high" />
        
        <Message Text="Current Target Framework: $(TargetFramework)" Importance="high" />
    </Target>
    
    <Target Name="LogDirectXInfoAtStartup" BeforeTargets="Build">
        <Message Text="Agility SDK Build: $(UsingAgilitySDK)" Importance="high" />
        <Message Text="DirectX Platform: '$(NativePlatformName)'" Importance="high" />
    </Target>
    
    
    <!-- Run custom Powershell startup scripts: 
            This enables any kind of custom startup logic you want to happen ... 
            Edit the code in the Powershell script to run things and do any kind
            of extra work/processing you want or need ... -->
    <Target Name="RunToolsAtStartup" BeforeTargets="Build">
        <PropertyGroup>
            <StartupScriptName>DXSBuildStartup.ps1</StartupScriptName>
            <LogFileNamePrefix>$(MSBuildProjectName)_$(Configuration)_$(Platform)_Build</LogFileNamePrefix>
            <ScriptLocation Condition=" '$(ScriptLocation)'=='' ">$(PowershellScriptsDir)\$(StartupScriptName)</ScriptLocation>
            <LogFileLocation Condition=" '$(LogFileLocation)'=='' ">$(RepoRootPath)build\logs\$(LogFileNamePrefix)_PreBuildToolsLog.log</LogFileLocation>
            
            <!-- Select Powershell version to use and set it to $(PwshExe) property: -->
            <!--<UseCustomPowershellInstall>true</UseCustomPowershellInstall>-->
            <UseCustomPowershellInstall Condition=" '$(UseCustomPowershellInstall)'=='' ">false</UseCustomPowershellInstall>
            
            <PWSH_VER Condition=" '$(PWSH_VER)'=='' ">7</PWSH_VER>
            <CustomPowershellPath>"C:\Program Files\PowerShell\$(PWSH_VER)\pwsh.exe"</CustomPowershellPath>
            <PwshExe Condition=" '$(UseCustomPowershellInstall)'=='true' ">$(CustomPowershellPath)</PwshExe>
            <PwshExe Condition=" '$(UseCustomPowershellInstall)'=='false' ">pwsh.exe</PwshExe>
            <!--<PowerShellExe Condition=" '$(PowerShellExe)'=='' ">powershell.exe</PowerShellExe>-->
            <!-- ................................................................... -->


            <!-- Create log message for build tool: -->
            <RunPwshExe>$(PwshExe)</RunPwshExe>
        </PropertyGroup>
                
        <!-- Run the startup Powershell script: -->
        <Message Text="Running Startup Scripts @ '$(ScriptLocation)'" Importance="high" />
        <Exec Command="$(RunPwshExe) -ExecutionPolicy Bypass -File $(ScriptLocation) -Argument1 $(LogFileLocation) -Argument2 $(AssemblyName) -Argument3 $(PlatformNameStr)" />
    </Target>

    
    
    <!-- Log build completion info: -->
    <Target Name="LogBuildCompletionMessage" AfterTargets="Build">
        <!-- Get the build results from MSBuild properties: -->
        <PropertyGroup>
            <BuildResult Condition=" '$(MSBuildLastTaskResult)'=='' ">Unknown</BuildResult>
            <BuildResult Condition=" '$(MSBuildLastTaskResult)'=='true' ">Success</BuildResult>
            <BuildResult Condition=" '$(MSBuildLastTaskResult)'!='true' ">Failed</BuildResult>
        </PropertyGroup>
        
        <!-- Print the build result code and info: -->
        <Message Text="-------------------------------" Importance="high" />
        <Message Text="DXSharp SDK assembly build process completed for: '$(AssemblyName)'." Importance="high" />
        <Message Text="MSBuild Result: '$(BuildResult)' " Importance="high" />
        <Message Text="-------------------------------" Importance="high" />
        
        <OnError ExecuteTargets="FailedBuildMessage"/>
    </Target>
    
    
    <!-- Failure Targets: -->
    <Target Name="FailedBuildMessage">
        <Message Text="SDK build failed for $(MSBuildProjectName)!" 
                 Importance="high" />
    </Target>
</Project>




        <!-- <LogMessage Condition=" '$(LogMessage)'=='' ">[Build Host] - $(MSDeployComputerName) :: Running startup scripts @ $(ScriptLocation) ...%0d%0a'[BuildHost] :: Native Platform Target: $(NativePlatformName)'%0d%0a'[BuildHost] :: SDK Target Frameworks: $(DotNetTargets)'%0d%0a'[BuildHost] :: SDK Target Processors: $(PlatformNameStr)'%0d%0a'[BuildHost] :: Current Target Framework: $(TargetFramework)</LogMessage>-->
        <!--<LogMessage Condition=" '$(LogMessage)'=='' ">
            <![CDATA[
            [Build Host] - $(MSDeployComputerName) :: Running startup scripts @ $(ScriptLocation) ...
            [BuildHost] :: Native Platform Target: $(NativePlatformName)
            [BuildHost] :: SDK Target Frameworks: $(DotNetTargets)
            [BuildHost] :: SDK Target Processors: $(PlatformNameStr)
            [BuildHost] :: Current Target Framework: $(TargetFramework)
            ]]>
        </LogMessage>
        &lt;!&ndash; Convert it to proper string: &ndash;&gt;
        <LogMessage >$(LogMessage.Replace('%0d%0a', $([System.Environment]::NewLine)))</LogMessage>-->
            
            